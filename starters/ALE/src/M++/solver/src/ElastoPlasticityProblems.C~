// file: Solution.C
// author: Jiping Xin

#include "ElastoPlasticityProblems.h"

void ElastoPlasticityProblems::SetSubDomain (Mesh& M) {
	for (cell c = M.cells(); c != M.cells_end(); c++) {
		Point p(c());
		hash_map<Point,Cell*,Hash>::iterator it = M.Cells::find(p);
		switch (example_id) {
		case 1 : // 2d elasticity dirichlet b.c. 
			it->second->SetSubdomain(0);
			break;
		case 2 : // 3d elasticity dirichlet b.c. 
			it->second->SetSubdomain(0);
			break;
		case 3 : // 2d perfect plasticity
			it->second->SetSubdomain(0);
			break;
		case 4 : // 3d perfect plasticity
			it->second->SetSubdomain(0);
			break;
		case 7 : // 2d abaqus
			it->second->SetSubdomain(0);
			break;
		}   
    }
}

void ElastoPlasticityProblems::SetBoundaryType (Mesh& M) {
    for (bnd_face bf = M.bnd_faces(); bf != M.bnd_faces_end(); bf++) {
		Point p(bf());
		hash_map<Point,BoundaryFace,Hash>::iterator it = M.BoundaryFaces::find(p);
		switch (example_id) {
		case 1 :
			it->second.SetPart(1);
			break;
		case 2 :
			it->second.SetPart(1);
			break;
		case 3 : {
			break;
		}
		case 4 : {
			break;
		}
		case 7 : {
			if (p[0] == 0)
				it->second.SetPart(1);
			else if (p[0] == 1) {
				if (p[1] > 0.75)
					it->second.SetPart(2);
				else
					it->second.SetPart(3);
			}
			else if (p[1] == 0)
				it->second.SetPart(4);
			else if (p[1] == 1)
				it->second.SetPart(5);
			break;
		}
		}
    }
}

bool ElastoPlasticityProblems::IsDirichlet (int id) {
    switch (example_id) {
    case 1 : {
		if (id == 1) {
			return true;
		}
		return false;
		break;
    }
    case 2 : {
		if (id == 1) {
			return true;
		}
		return false;
		break;
    }
    case 3 : {
        if (id == 3 || id == 4) {
			return true;
		}
		return false;
		break;
    }
    case 4 : {
        if (id == 2 || id == 3 || id == 4) {
			return true;
		}
		return false;
		break;
    }
    case 7 : {
        if (id == 1 || id == 2 || id == 4) {
			return true;
		}
		return false;
		break;
    }
    }
}

void ElastoPlasticityProblems::SetDirichlet (Point p, double T, int k, RowBndValues& u_c, int id) {
    Point pp = zero;
    switch (example_id) {
    case 1 : {
		if (id == 1) {
			pp[0] = sin(Pi*p[0]) * cos(Pi*p[1]);
			pp[1] = cos(Pi*p[0]) * sin(Pi*p[1]);
			pp *= 0.2;
			u_c.D(k,0) = true;
			u_c(k,0) = pp[0];
			u_c.D(k,1) = true;
			u_c(k,1) = pp[1];
		}
		break;
    }
    case 2 : {
		if (id == 1) {
			pp[0] = exp(p[0] + p[1] + p[2]);
			pp[1] = exp(p[0] + p[1] + p[2]);
			pp[2] = exp(p[0] + p[1] + p[2]);
			pp *= 0.01;
			u_c.D(k,0) = true;
			u_c(k,0) = pp[0];
			u_c.D(k,1) = true;
			u_c(k,1) = pp[1];
			u_c.D(k,2) = true;
			u_c(k,2) = pp[2];
		}
		break;
    }
    case 3 : 
		if (id == 4) {
			u_c.D(k, 1) = true;
			u_c(k, 1) = 0;
		}
		else if (id == 3) {
			u_c.D(k, 0) = true;
			u_c(k, 0) = 0;
		} 
		break;
    case 4 : 
		if (id == 4) {
			u_c.D(k, 1) = true;
			u_c(k, 1) = 0;
		}
		else if (id == 3) {
			u_c.D(k, 2) = true;
			u_c(k, 2) = 0;
		} 
		else if (id == 2) {
			u_c.D(k, 0) = true;
			u_c(k, 0) = 0;
		} 
		break;
    case 7 : {
		if (id == 1) {
			u_c(k, 0)   = 0.0;
			u_c.D(k, 0) = true;
			u_c(k, 1)   = 0.0;
			u_c.D(k, 1) = true;
		}
		else if (id == 2) {
			u_c(k, 0)   = -1.0 * T;
			u_c.D(k, 0) = true;
		}
		else if (id == 4) {
			u_c(k, 0)   = 0.0;
			u_c.D(k, 0) = true;
			u_c(k, 1)   = 0.0;
			u_c.D(k, 1) = true;
		}
		break;
    }
    }
}

Point ElastoPlasticityProblems::SetNeumann (Point p, double t, int id) {
    Point pp;
    switch (example_id) {
    case 3 : 
		if (id == 1) {
			double a = 1.0;
			double b = 2.0;
			double c = t;
			double Y = 0.24 * 2.0 / sqrt(3.0);
			double r = b;
			double pa = Y * (log(c / a) + 0.5 * (1.0 - c * c / b / b));
			return pa * p / norm(p);
		}
		return zero;
		break;
    case 4 : 
        if (id == 5) {
			double a = 1.0;
			double b = 2.0;
			double c = t;
			double Y = 0.24;
			double r = b;
			double pa = Y * (2.0 * log(c / a) + 2.0 / 3.0 * (1.0 - c * c * c / b / b / b));
			return pa * p / norm(p);
		}
		return zero;
		break;
    case 7 : {
		return zero;
		break;
    }
    }
}

Point ElastoPlasticityProblems::SetSource (Point p, double t) {
    Point pp = zero;
    switch (example_id) {
    case 1 : {
		Point pp;
		pp[0] = 2 * (2 * mu + lambda) * Pi * Pi * sin(Pi * p[0]) * cos(Pi * p[1]);
		pp[1] = 2 * (2 * mu + lambda) * Pi * Pi * cos(Pi * p[0]) * sin(Pi * p[1]);
		return 0.2 * pp;
    }
    case 2 : {
		pp[0] = -3 * (2 * mu + lambda) * exp(p[0] + p[1]  + p[2]);
		pp[1] = -3 * (2 * mu + lambda) * exp(p[0] + p[1]  + p[2]);
		pp[2] = -3 * (2 * mu + lambda) * exp(p[0] + p[1]  + p[2]);
		return 0.01 * pp;
    }
    case 3 : 
		pp = zero;
		return pp;
		break;
    case 4 : 
		pp = zero;
		return pp;
		break;
    case 7 : { 
		pp = zero;
		return pp;
		break;
    }
    }
}

Point ElastoPlasticityProblems::SetSolution (Point p, double t) {
    Point pp = zero;
    switch (example_id) {
    case 1 :
        pp[0] = sin(Pi * p[0]) * cos(Pi * p[1]);
		pp[1] = cos(Pi * p[0]) * sin(Pi * p[1]);
        return 0.2 * pp;
        break;
    case 2 :
        pp[0] = exp(p[0] + p[1] + p[2]);
		pp[1] = exp(p[0] + p[1] + p[2]);
		pp[2] = exp(p[0] + p[1] + p[2]);
        return 0.01 * pp;
        break;
    case 3 : 
		pp = zero;
		return pp;
		break;
    case 4 : 
		pp = zero;
		return pp;
		break;
    case 7 : { 
		pp = zero;
		return pp;
		break;
    }
    }
}
