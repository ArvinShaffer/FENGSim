#include "Contact.h"
#include <CGAL/Simple_cartesian.h>
#include <CGAL/Segment_2.h>
#include <CGAL/intersections.h>
#include <iostream>

typedef CGAL::Simple_cartesian<double> Kernel;
typedef Kernel::Point_2 Point_2;
typedef Kernel::Segment_2 Segment_2;

bool SegmentIntersection (double* x) {
	Point_2 p1(x[0],x[1]), q1(x[2],x[3]);
    Segment_2 s1(p1,q1);
	Point_2 p2(x[4],x[5]), q2(x[6],x[7]);
    Segment_2 s2(p2,q2);

	const auto result = CGAL::intersection(s1, s2);
	if (result) {
		if (const Segment_2* s = boost::get<Segment_2>(&*result)) {
			return true;
		}
		else {
			const Point_2* p = boost::get<Point_2>(&*result);
			if (p->x()==p1[0]&&p->y()==p1[1])
				return false;
			if (p->x()==p2[0]&&p->y()==p2[1])
				return false;
			return true;
		}
	}
	return false;
}

void ContactMain () {
	std::cout << "contact test" << std::endl;
	double x[8];
	x[0] = 0;
	x[1] = 0;
	x[2] = 1;
	x[3] = 1;
	x[4] = 1;
	x[5] = 0;
	x[6] = 0;
	x[7] = 1;
	std::cout << "intersection a point: " << SegmentIntersection(x) << std::endl;
	x[0] = 0;
	x[1] = 0;
	x[2] = 0;
	x[3] = 1;
	x[4] = 0;
	x[5] = -1;
	x[6] = 0;
	x[7] = 2;
	std::cout << "intersection a segment: " << SegmentIntersection(x) << std::endl;
	x[0] = 0;
	x[1] = 0;
	x[2] = 1;
	x[3] = 0;
	x[4] = 0;
	x[5] = 0;
	x[6] = 0;
	x[7] = 1;
	std::cout << "intersection at vertex: " << SegmentIntersection(x) << std::endl;
	x[0] = 0;
	x[1] = 0;
	x[2] = 0;
	x[3] = 1;
	x[4] = 1;
	x[5] = 0;
	x[6] = 1;
	x[7] = 1;
	std::cout << "no intersection: " << SegmentIntersection(x) << std::endl;
}
